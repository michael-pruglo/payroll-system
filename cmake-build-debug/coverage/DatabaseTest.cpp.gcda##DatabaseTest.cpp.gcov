        -:    0:Source:C:/Users/mickl/ClionProjects/payroll-system/tests/DatabaseTest.cpp
        -:    0:Graph:C:\Users\mickl\ClionProjects\payroll-system\cmake-build-debug\tests\CMakeFiles\google_test.dir\DatabaseTest.cpp.gcno
        -:    0:Data:C:\Users\mickl\ClionProjects\payroll-system\cmake-build-debug\tests\CMakeFiles\google_test.dir\DatabaseTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <gtest/gtest.h>
        -:    2:#include "src/Payrolldatabase.hpp"
        -:    3:#include "src/Payrolldatabase.cpp"
        -:    4:#include "src/Employee.hpp"
        -:    5:#include "src/Employee.cpp"
        -:    6:
        -:    7:class PayrollDatabaseTest : public ::testing::Test
        -:    8:{
        -:    9:protected:
       11:   10:    void SetUp() override
        -:   11:    {
      11*:   12:        ASSERT_NO_THROW(addBob());
       11:   12-block  0
       11:   12-block  1
       11:   12-block  2
       11:   12-block  3
    %%%%%:   12-block  4
    %%%%%:   12-block  5
    %%%%%:   12-block  6
    %%%%%:   12-block  7
    %%%%%:   12-block  8
    $$$$$:   12-block  9
    $$$$$:   12-block 10
    $$$$$:   12-block 11
    $$$$$:   12-block 12
    $$$$$:   12-block 13
    $$$$$:   12-block 14
    $$$$$:   12-block 15
    $$$$$:   12-block 16
    $$$$$:   12-block 17
    $$$$$:   12-block 18
    $$$$$:   12-block 19
    $$$$$:   12-block 20
    $$$$$:   12-block 21
    $$$$$:   12-block 22
    $$$$$:   12-block 23
    $$$$$:   12-block 24
       11:   13:        initSize = database->size();
       11:   13-block  0
      11*:   14:        ASSERT_EQ(initSize, 1);
       11:   14-block  0
    %%%%%:   14-block  1
    %%%%%:   14-block  2
    %%%%%:   14-block  3
    %%%%%:   14-block  4
    $$$$$:   14-block  5
    $$$$$:   14-block  6
    $$$$$:   14-block  7
    $$$$$:   14-block  8
    $$$$$:   14-block  9
    $$$$$:   14-block 10
        -:   15:    }
       11:   16:    void TearDown() override
        -:   17:    {
       11:   18:        database->clear();
       11:   18-block  0
      11*:   19:        ASSERT_EQ(database->size(), 0);
       11:   19-block  0
    %%%%%:   19-block  1
    %%%%%:   19-block  2
    %%%%%:   19-block  3
    %%%%%:   19-block  4
    $$$$$:   19-block  5
    $$$$$:   19-block  6
    $$$$$:   19-block  7
    $$$$$:   19-block  8
    $$$$$:   19-block  9
    $$$$$:   19-block 10
    $$$$$:   19-block 11
        -:   20:    }
        -:   21:
        -:   22:    int bobId = 1, inexistentId = -1;
        -:   23:    std::shared_ptr<Employee> bob { new Employee(bobId, "Bob", "Boob st.") };
       21:   24:    inline void addBob() { database->addEmployee(bobId, bob); }
       21:   24-block  0
       11:   24-block  1
       10:   24-block  2
       34:   25:    void addNBobs(int n) { for (int i=0; i<n; ++i) database->addEmployee(i+bobId+1, bob); }
        2:   25-block  0
       34:   25-block  1
       32:   25-block  2
       32:   25-block  3
        2:   25-block  4
    $$$$$:   25-block  5
        -:   26:
        -:   27:
        -:   28:    std::shared_ptr<PayrollDatabase> database = PayrollDatabase::getInstance();
        -:   29:    int initSize;
        -:   30:};
        -:   31:
        4:   32:TEST_F(PayrollDatabaseTest, AddMultipleTimesThrowsAddDuplicate)
        -:   33:{
       11:   34:    for (int i = 0; i < 10; ++i)
        -:   35:    {
      10*:   36:        ASSERT_THROW(addBob(), PayrollDatabase::add_duplicate);
      10*:   37:        ASSERT_EQ(database->size(), initSize);
        -:   38:    }
        -:   39:}
------------------
_ZN59PayrollDatabaseTest_AddMultipleTimesThrowsAddDuplicate_TestD0Ev:
        1:   32:TEST_F(PayrollDatabaseTest, AddMultipleTimesThrowsAddDuplicate)
        1:   32-block  0
------------------
_ZN59PayrollDatabaseTest_AddMultipleTimesThrowsAddDuplicate_TestD1Ev:
        1:   32:TEST_F(PayrollDatabaseTest, AddMultipleTimesThrowsAddDuplicate)
        1:   32-block  0
------------------
_ZN59PayrollDatabaseTest_AddMultipleTimesThrowsAddDuplicate_Test8TestBodyEv:
        1:   32:TEST_F(PayrollDatabaseTest, AddMultipleTimesThrowsAddDuplicate)
        -:   33:{
       11:   34:    for (int i = 0; i < 10; ++i)
        1:   34-block  0
       11:   34-block  1
       10:   34-block  2
        -:   35:    {
      10*:   36:        ASSERT_THROW(addBob(), PayrollDatabase::add_duplicate);
       10:   36-block  0
       10:   36-block  1
       10:   36-block  2
       10:   36-block  3
       10:   36-block  4
    %%%%%:   36-block  5
    %%%%%:   36-block  6
    %%%%%:   36-block  7
    %%%%%:   36-block  8
    %%%%%:   36-block  9
       10:   36-block 10
       10:   36-block 11
    $$$$$:   36-block 12
    $$$$$:   36-block 13
    $$$$$:   36-block 14
    $$$$$:   36-block 15
    $$$$$:   36-block 16
      10*:   37:        ASSERT_EQ(database->size(), initSize);
       10:   37-block  0
       10:   37-block  1
    %%%%%:   37-block  2
    %%%%%:   37-block  3
    %%%%%:   37-block  4
    %%%%%:   37-block  5
    $$$$$:   37-block  6
    $$$$$:   37-block  7
    $$$$$:   37-block  8
    $$$$$:   37-block  9
    $$$$$:   37-block 10
    $$$$$:   37-block 11
        -:   38:    }
        -:   39:}
------------------
_ZN59PayrollDatabaseTest_AddMultipleTimesThrowsAddDuplicate_TestC1Ev:
        1:   32:TEST_F(PayrollDatabaseTest, AddMultipleTimesThrowsAddDuplicate)
        1:   32-block  0
------------------
        -:   40:
        4:   41:TEST_F(PayrollDatabaseTest, AddMultipleDifferent)
        -:   42:{
        1:   43:    int n = 15;
       1*:   44:    ASSERT_NO_THROW(addNBobs(n));
       1*:   45:    ASSERT_EQ(database->size(), 1+n);
        -:   46:}
------------------
_ZN45PayrollDatabaseTest_AddMultipleDifferent_TestD0Ev:
        1:   41:TEST_F(PayrollDatabaseTest, AddMultipleDifferent)
        1:   41-block  0
------------------
_ZN45PayrollDatabaseTest_AddMultipleDifferent_TestD1Ev:
        1:   41:TEST_F(PayrollDatabaseTest, AddMultipleDifferent)
        1:   41-block  0
------------------
_ZN45PayrollDatabaseTest_AddMultipleDifferent_Test8TestBodyEv:
        1:   41:TEST_F(PayrollDatabaseTest, AddMultipleDifferent)
        -:   42:{
        1:   43:    int n = 15;
       1*:   44:    ASSERT_NO_THROW(addNBobs(n));
        1:   44-block  0
        1:   44-block  1
        1:   44-block  2
        1:   44-block  3
    %%%%%:   44-block  4
    %%%%%:   44-block  5
    %%%%%:   44-block  6
    %%%%%:   44-block  7
    %%%%%:   44-block  8
    $$$$$:   44-block  9
    $$$$$:   44-block 10
    $$$$$:   44-block 11
    $$$$$:   44-block 12
    $$$$$:   44-block 13
    $$$$$:   44-block 14
    $$$$$:   44-block 15
    $$$$$:   44-block 16
    $$$$$:   44-block 17
    $$$$$:   44-block 18
    $$$$$:   44-block 19
    $$$$$:   44-block 20
    $$$$$:   44-block 21
    $$$$$:   44-block 22
    $$$$$:   44-block 23
    $$$$$:   44-block 24
       1*:   45:    ASSERT_EQ(database->size(), 1+n);
        1:   45-block  0
        1:   45-block  1
    %%%%%:   45-block  2
    %%%%%:   45-block  3
    %%%%%:   45-block  4
    %%%%%:   45-block  5
    $$$$$:   45-block  6
    $$$$$:   45-block  7
    $$$$$:   45-block  8
    $$$$$:   45-block  9
    $$$$$:   45-block 10
    $$$$$:   45-block 11
    $$$$$:   45-block 12
        -:   46:}
------------------
_ZN45PayrollDatabaseTest_AddMultipleDifferent_TestC1Ev:
        1:   41:TEST_F(PayrollDatabaseTest, AddMultipleDifferent)
        1:   41-block  0
------------------
        -:   47:
        4:   48:TEST_F(PayrollDatabaseTest, CanRetreive)
        -:   49:{
       2*:   50:    ASSERT_NO_THROW({
        -:   51:        auto givenE = database->getEmployee(bobId);
        -:   52:        ASSERT_EQ(bob, givenE);
        -:   53:        ASSERT_EQ(database->size(), initSize);
        -:   54:    });
        -:   55:}
------------------
_ZN36PayrollDatabaseTest_CanRetreive_TestD0Ev:
        1:   48:TEST_F(PayrollDatabaseTest, CanRetreive)
        1:   48-block  0
------------------
_ZN36PayrollDatabaseTest_CanRetreive_TestD1Ev:
        1:   48:TEST_F(PayrollDatabaseTest, CanRetreive)
        1:   48-block  0
------------------
_ZN36PayrollDatabaseTest_CanRetreive_Test8TestBodyEv:
        1:   48:TEST_F(PayrollDatabaseTest, CanRetreive)
        -:   49:{
       2*:   50:    ASSERT_NO_THROW({
        1:   50-block  0
        1:   50-block  1
        1:   50-block  2
        1:   50-block  3
        1:   50-block  4
        1:   50-block  5
    %%%%%:   50-block  6
    %%%%%:   50-block  7
    %%%%%:   50-block  8
    %%%%%:   50-block  9
        1:   50-block 10
        1:   50-block 11
    %%%%%:   50-block 12
    %%%%%:   50-block 13
    %%%%%:   50-block 14
    %%%%%:   50-block 15
    %%%%%:   50-block 16
    %%%%%:   50-block 17
    %%%%%:   50-block 18
    %%%%%:   50-block 19
    %%%%%:   50-block 20
    $$$$$:   50-block 21
    $$$$$:   50-block 22
    $$$$$:   50-block 23
    $$$$$:   50-block 24
    $$$$$:   50-block 25
    $$$$$:   50-block 26
    $$$$$:   50-block 27
    $$$$$:   50-block 28
    $$$$$:   50-block 29
    $$$$$:   50-block 30
    $$$$$:   50-block 31
    $$$$$:   50-block 32
    $$$$$:   50-block 33
    $$$$$:   50-block 34
    $$$$$:   50-block 35
    $$$$$:   50-block 36
    $$$$$:   50-block 37
    $$$$$:   50-block 38
    $$$$$:   50-block 39
    $$$$$:   50-block 40
    $$$$$:   50-block 41
    $$$$$:   50-block 42
    $$$$$:   50-block 43
    $$$$$:   50-block 44
    $$$$$:   50-block 45
    $$$$$:   50-block 46
    $$$$$:   50-block 47
    $$$$$:   50-block 48
        -:   51:        auto givenE = database->getEmployee(bobId);
        -:   52:        ASSERT_EQ(bob, givenE);
        -:   53:        ASSERT_EQ(database->size(), initSize);
        -:   54:    });
        -:   55:}
------------------
_ZN36PayrollDatabaseTest_CanRetreive_TestC1Ev:
        1:   48:TEST_F(PayrollDatabaseTest, CanRetreive)
        1:   48-block  0
------------------
        -:   56:
        4:   57:TEST_F(PayrollDatabaseTest, CanRetreiveMultipleTimes)
        -:   58:{
      21*:   59:    ASSERT_NO_THROW({
        -:   60:        for (int i = 0; i < 10; ++i)
        -:   61:        {
        -:   62:            auto givenE = database->getEmployee(bobId);
        -:   63:            ASSERT_EQ(bob, givenE);
        -:   64:            ASSERT_EQ(database->size(), initSize);
        -:   65:        }
        -:   66:    });
        -:   67:}
------------------
_ZN49PayrollDatabaseTest_CanRetreiveMultipleTimes_TestD0Ev:
        1:   57:TEST_F(PayrollDatabaseTest, CanRetreiveMultipleTimes)
        1:   57-block  0
------------------
_ZN49PayrollDatabaseTest_CanRetreiveMultipleTimes_TestD1Ev:
        1:   57:TEST_F(PayrollDatabaseTest, CanRetreiveMultipleTimes)
        1:   57-block  0
------------------
_ZN49PayrollDatabaseTest_CanRetreiveMultipleTimes_Test8TestBodyEv:
        1:   57:TEST_F(PayrollDatabaseTest, CanRetreiveMultipleTimes)
        -:   58:{
      21*:   59:    ASSERT_NO_THROW({
        1:   59-block  0
        1:   59-block  1
        1:   59-block  2
        1:   59-block  3
       11:   59-block  4
       10:   59-block  5
       10:   59-block  6
       10:   59-block  7
    %%%%%:   59-block  8
    %%%%%:   59-block  9
    %%%%%:   59-block 10
    %%%%%:   59-block 11
       10:   59-block 12
       10:   59-block 13
    %%%%%:   59-block 14
    %%%%%:   59-block 15
    %%%%%:   59-block 16
    %%%%%:   59-block 17
       10:   59-block 18
    %%%%%:   59-block 19
    %%%%%:   59-block 20
    %%%%%:   59-block 21
    %%%%%:   59-block 22
    %%%%%:   59-block 23
    $$$$$:   59-block 24
    $$$$$:   59-block 25
    $$$$$:   59-block 26
    $$$$$:   59-block 27
    $$$$$:   59-block 28
    $$$$$:   59-block 29
    $$$$$:   59-block 30
    $$$$$:   59-block 31
    $$$$$:   59-block 32
    $$$$$:   59-block 33
    $$$$$:   59-block 34
    $$$$$:   59-block 35
    $$$$$:   59-block 36
    $$$$$:   59-block 37
    $$$$$:   59-block 38
    $$$$$:   59-block 39
    $$$$$:   59-block 40
    $$$$$:   59-block 41
    $$$$$:   59-block 42
    $$$$$:   59-block 43
    $$$$$:   59-block 44
    $$$$$:   59-block 45
    $$$$$:   59-block 46
    $$$$$:   59-block 47
    $$$$$:   59-block 48
    $$$$$:   59-block 49
    $$$$$:   59-block 50
    $$$$$:   59-block 51
        -:   60:        for (int i = 0; i < 10; ++i)
        -:   61:        {
        -:   62:            auto givenE = database->getEmployee(bobId);
        -:   63:            ASSERT_EQ(bob, givenE);
        -:   64:            ASSERT_EQ(database->size(), initSize);
        -:   65:        }
        -:   66:    });
        -:   67:}
------------------
_ZN49PayrollDatabaseTest_CanRetreiveMultipleTimes_TestC1Ev:
        1:   57:TEST_F(PayrollDatabaseTest, CanRetreiveMultipleTimes)
        1:   57-block  0
------------------
        -:   68:
        4:   69:TEST_F(PayrollDatabaseTest, RetrieveInexistentThrowsNotFound)
        -:   70:{
       1*:   71:    ASSERT_THROW(database->getEmployee(inexistentId), PayrollDatabase::not_found);
       1*:   72:    ASSERT_EQ(database->size(), initSize);
        -:   73:}
------------------
_ZN57PayrollDatabaseTest_RetrieveInexistentThrowsNotFound_TestD0Ev:
        1:   69:TEST_F(PayrollDatabaseTest, RetrieveInexistentThrowsNotFound)
        1:   69-block  0
------------------
_ZN57PayrollDatabaseTest_RetrieveInexistentThrowsNotFound_TestD1Ev:
        1:   69:TEST_F(PayrollDatabaseTest, RetrieveInexistentThrowsNotFound)
        1:   69-block  0
------------------
_ZN57PayrollDatabaseTest_RetrieveInexistentThrowsNotFound_Test8TestBodyEv:
        1:   69:TEST_F(PayrollDatabaseTest, RetrieveInexistentThrowsNotFound)
        -:   70:{
       1*:   71:    ASSERT_THROW(database->getEmployee(inexistentId), PayrollDatabase::not_found);
        1:   71-block  0
        1:   71-block  1
        1:   71-block  2
        1:   71-block  3
    %%%%%:   71-block  4
        1:   71-block  5
    %%%%%:   71-block  6
    %%%%%:   71-block  7
    %%%%%:   71-block  8
    %%%%%:   71-block  9
    %%%%%:   71-block 10
        1:   71-block 11
        1:   71-block 12
    $$$$$:   71-block 13
    $$$$$:   71-block 14
    $$$$$:   71-block 15
    $$$$$:   71-block 16
    $$$$$:   71-block 17
       1*:   72:    ASSERT_EQ(database->size(), initSize);
        1:   72-block  0
        1:   72-block  1
    %%%%%:   72-block  2
    %%%%%:   72-block  3
    %%%%%:   72-block  4
    %%%%%:   72-block  5
    $$$$$:   72-block  6
    $$$$$:   72-block  7
    $$$$$:   72-block  8
    $$$$$:   72-block  9
    $$$$$:   72-block 10
    $$$$$:   72-block 11
        -:   73:}
------------------
_ZN57PayrollDatabaseTest_RetrieveInexistentThrowsNotFound_TestC1Ev:
        1:   69:TEST_F(PayrollDatabaseTest, RetrieveInexistentThrowsNotFound)
        1:   69-block  0
------------------
        -:   74:
        4:   75:TEST_F(PayrollDatabaseTest, Update)
        -:   76:{
        3:   77:    std::shared_ptr<Employee> frank { new Employee(bobId, "Frank", "French st.") };
       1*:   78:    ASSERT_NO_THROW(database->updateEmployee(bobId, frank));
        1:   79:    auto givenE = database->getEmployee(bobId);
       1*:   80:    ASSERT_EQ(frank, givenE);
       1*:   81:    ASSERT_EQ(database->size(), initSize);
        -:   82:}
------------------
_ZN31PayrollDatabaseTest_Update_TestD0Ev:
        1:   75:TEST_F(PayrollDatabaseTest, Update)
        1:   75-block  0
------------------
_ZN31PayrollDatabaseTest_Update_TestD1Ev:
        1:   75:TEST_F(PayrollDatabaseTest, Update)
        1:   75-block  0
------------------
_ZN31PayrollDatabaseTest_Update_Test8TestBodyEv:
        1:   75:TEST_F(PayrollDatabaseTest, Update)
        -:   76:{
        3:   77:    std::shared_ptr<Employee> frank { new Employee(bobId, "Frank", "French st.") };
        1:   77-block  0
        1:   77-block  1
        1:   77-block  2
        1:   77-block  3
    $$$$$:   77-block  4
    $$$$$:   77-block  5
    $$$$$:   77-block  6
       1*:   78:    ASSERT_NO_THROW(database->updateEmployee(bobId, frank));
        1:   78-block  0
        1:   78-block  1
        1:   78-block  2
        1:   78-block  3
    %%%%%:   78-block  4
    %%%%%:   78-block  5
    %%%%%:   78-block  6
    %%%%%:   78-block  7
    %%%%%:   78-block  8
    $$$$$:   78-block  9
    $$$$$:   78-block 10
    $$$$$:   78-block 11
    $$$$$:   78-block 12
    $$$$$:   78-block 13
    $$$$$:   78-block 14
    $$$$$:   78-block 15
    $$$$$:   78-block 16
    $$$$$:   78-block 17
    $$$$$:   78-block 18
    $$$$$:   78-block 19
    $$$$$:   78-block 20
    $$$$$:   78-block 21
    $$$$$:   78-block 22
    $$$$$:   78-block 23
    $$$$$:   78-block 24
    $$$$$:   78-block 25
    $$$$$:   78-block 26
        1:   79:    auto givenE = database->getEmployee(bobId);
        1:   79-block  0
    $$$$$:   79-block  1
       1*:   80:    ASSERT_EQ(frank, givenE);
        1:   80-block  0
        1:   80-block  1
    %%%%%:   80-block  2
    %%%%%:   80-block  3
    %%%%%:   80-block  4
    %%%%%:   80-block  5
    $$$$$:   80-block  6
    $$$$$:   80-block  7
    $$$$$:   80-block  8
    $$$$$:   80-block  9
    $$$$$:   80-block 10
       1*:   81:    ASSERT_EQ(database->size(), initSize);
        1:   81-block  0
        1:   81-block  1
    %%%%%:   81-block  2
    %%%%%:   81-block  3
    %%%%%:   81-block  4
    %%%%%:   81-block  5
    $$$$$:   81-block  6
    $$$$$:   81-block  7
    $$$$$:   81-block  8
    $$$$$:   81-block  9
    $$$$$:   81-block 10
    $$$$$:   81-block 11
        -:   82:}
------------------
_ZN31PayrollDatabaseTest_Update_TestC1Ev:
        1:   75:TEST_F(PayrollDatabaseTest, Update)
        1:   75-block  0
------------------
        -:   83:
        4:   84:TEST_F(PayrollDatabaseTest, UpdateInexistentThrowsNotFound)
        -:   85:{
       2*:   86:    ASSERT_THROW(database->updateEmployee(inexistentId, nullptr), PayrollDatabase::not_found);
       1*:   87:    ASSERT_EQ(database->size(), initSize);
        -:   88:}
------------------
_ZN55PayrollDatabaseTest_UpdateInexistentThrowsNotFound_TestD0Ev:
        1:   84:TEST_F(PayrollDatabaseTest, UpdateInexistentThrowsNotFound)
        1:   84-block  0
------------------
_ZN55PayrollDatabaseTest_UpdateInexistentThrowsNotFound_TestD1Ev:
        1:   84:TEST_F(PayrollDatabaseTest, UpdateInexistentThrowsNotFound)
        1:   84-block  0
------------------
_ZN55PayrollDatabaseTest_UpdateInexistentThrowsNotFound_Test8TestBodyEv:
        1:   84:TEST_F(PayrollDatabaseTest, UpdateInexistentThrowsNotFound)
        -:   85:{
       2*:   86:    ASSERT_THROW(database->updateEmployee(inexistentId, nullptr), PayrollDatabase::not_found);
        1:   86-block  0
        1:   86-block  1
        1:   86-block  2
        1:   86-block  3
    %%%%%:   86-block  4
        1:   86-block  5
    %%%%%:   86-block  6
    %%%%%:   86-block  7
    %%%%%:   86-block  8
    %%%%%:   86-block  9
    %%%%%:   86-block 10
        1:   86-block 11
        1:   86-block 12
        1:   86-block 13
        1:   86-block 14
    $$$$$:   86-block 15
    $$$$$:   86-block 16
    $$$$$:   86-block 17
    $$$$$:   86-block 18
    $$$$$:   86-block 19
       1*:   87:    ASSERT_EQ(database->size(), initSize);
        1:   87-block  0
        1:   87-block  1
    %%%%%:   87-block  2
    %%%%%:   87-block  3
    %%%%%:   87-block  4
    %%%%%:   87-block  5
    $$$$$:   87-block  6
    $$$$$:   87-block  7
    $$$$$:   87-block  8
    $$$$$:   87-block  9
    $$$$$:   87-block 10
    $$$$$:   87-block 11
        -:   88:}
------------------
_ZN55PayrollDatabaseTest_UpdateInexistentThrowsNotFound_TestC1Ev:
        1:   84:TEST_F(PayrollDatabaseTest, UpdateInexistentThrowsNotFound)
        1:   84-block  0
------------------
        -:   89:
        4:   90:TEST_F(PayrollDatabaseTest, Delete)
        -:   91:{
       1*:   92:    ASSERT_NO_THROW(database->deleteEmployee(bobId));
       1*:   93:    ASSERT_EQ(database->size(), initSize-1);
        -:   94:}
------------------
_ZN31PayrollDatabaseTest_Delete_TestD0Ev:
        1:   90:TEST_F(PayrollDatabaseTest, Delete)
        1:   90-block  0
------------------
_ZN31PayrollDatabaseTest_Delete_TestD1Ev:
        1:   90:TEST_F(PayrollDatabaseTest, Delete)
        1:   90-block  0
------------------
_ZN31PayrollDatabaseTest_Delete_Test8TestBodyEv:
        1:   90:TEST_F(PayrollDatabaseTest, Delete)
        -:   91:{
       1*:   92:    ASSERT_NO_THROW(database->deleteEmployee(bobId));
        1:   92-block  0
        1:   92-block  1
        1:   92-block  2
        1:   92-block  3
    %%%%%:   92-block  4
    %%%%%:   92-block  5
    %%%%%:   92-block  6
    %%%%%:   92-block  7
    %%%%%:   92-block  8
    $$$$$:   92-block  9
    $$$$$:   92-block 10
    $$$$$:   92-block 11
    $$$$$:   92-block 12
    $$$$$:   92-block 13
    $$$$$:   92-block 14
    $$$$$:   92-block 15
    $$$$$:   92-block 16
    $$$$$:   92-block 17
    $$$$$:   92-block 18
    $$$$$:   92-block 19
    $$$$$:   92-block 20
    $$$$$:   92-block 21
    $$$$$:   92-block 22
    $$$$$:   92-block 23
    $$$$$:   92-block 24
       1*:   93:    ASSERT_EQ(database->size(), initSize-1);
        1:   93-block  0
        1:   93-block  1
    %%%%%:   93-block  2
    %%%%%:   93-block  3
    %%%%%:   93-block  4
    %%%%%:   93-block  5
    $$$$$:   93-block  6
    $$$$$:   93-block  7
    $$$$$:   93-block  8
    $$$$$:   93-block  9
    $$$$$:   93-block 10
    $$$$$:   93-block 11
    $$$$$:   93-block 12
        -:   94:}
------------------
_ZN31PayrollDatabaseTest_Delete_TestC1Ev:
        1:   90:TEST_F(PayrollDatabaseTest, Delete)
        1:   90-block  0
------------------
        -:   95:
        4:   96:TEST_F(PayrollDatabaseTest, DeleteTwice)
        -:   97:{
       1*:   98:    ASSERT_NO_THROW(database->deleteEmployee(bobId));
       1*:   99:    ASSERT_THROW(database->deleteEmployee(bobId), PayrollDatabase::not_found);
       1*:  100:    ASSERT_EQ(database->size(), initSize-1);
        -:  101:}
------------------
_ZN36PayrollDatabaseTest_DeleteTwice_TestD0Ev:
        1:   96:TEST_F(PayrollDatabaseTest, DeleteTwice)
        1:   96-block  0
------------------
_ZN36PayrollDatabaseTest_DeleteTwice_TestD1Ev:
        1:   96:TEST_F(PayrollDatabaseTest, DeleteTwice)
        1:   96-block  0
------------------
_ZN36PayrollDatabaseTest_DeleteTwice_Test8TestBodyEv:
        1:   96:TEST_F(PayrollDatabaseTest, DeleteTwice)
        -:   97:{
       1*:   98:    ASSERT_NO_THROW(database->deleteEmployee(bobId));
        1:   98-block  0
        1:   98-block  1
        1:   98-block  2
        1:   98-block  3
    %%%%%:   98-block  4
    %%%%%:   98-block  5
    %%%%%:   98-block  6
    %%%%%:   98-block  7
    %%%%%:   98-block  8
    $$$$$:   98-block  9
    $$$$$:   98-block 10
    $$$$$:   98-block 11
    $$$$$:   98-block 12
    $$$$$:   98-block 13
    $$$$$:   98-block 14
    $$$$$:   98-block 15
    $$$$$:   98-block 16
    $$$$$:   98-block 17
    $$$$$:   98-block 18
    $$$$$:   98-block 19
    $$$$$:   98-block 20
    $$$$$:   98-block 21
    $$$$$:   98-block 22
    $$$$$:   98-block 23
    $$$$$:   98-block 24
       1*:   99:    ASSERT_THROW(database->deleteEmployee(bobId), PayrollDatabase::not_found);
        1:   99-block  0
        1:   99-block  1
        1:   99-block  2
        1:   99-block  3
        1:   99-block  4
    %%%%%:   99-block  5
    %%%%%:   99-block  6
    %%%%%:   99-block  7
    %%%%%:   99-block  8
    %%%%%:   99-block  9
        1:   99-block 10
        1:   99-block 11
    $$$$$:   99-block 12
    $$$$$:   99-block 13
    $$$$$:   99-block 14
    $$$$$:   99-block 15
    $$$$$:   99-block 16
       1*:  100:    ASSERT_EQ(database->size(), initSize-1);
        1:  100-block  0
        1:  100-block  1
    %%%%%:  100-block  2
    %%%%%:  100-block  3
    %%%%%:  100-block  4
    %%%%%:  100-block  5
    $$$$$:  100-block  6
    $$$$$:  100-block  7
    $$$$$:  100-block  8
    $$$$$:  100-block  9
    $$$$$:  100-block 10
    $$$$$:  100-block 11
    $$$$$:  100-block 12
        -:  101:}
------------------
_ZN36PayrollDatabaseTest_DeleteTwice_TestC1Ev:
        1:   96:TEST_F(PayrollDatabaseTest, DeleteTwice)
        1:   96-block  0
------------------
        -:  102:
        4:  103:TEST_F(PayrollDatabaseTest, DeleteInexistentThrowsNotFound)
        -:  104:{
       1*:  105:    ASSERT_THROW(database->deleteEmployee(inexistentId), PayrollDatabase::not_found);
       1*:  106:    ASSERT_EQ(database->size(), initSize);
        -:  107:}
------------------
_ZN55PayrollDatabaseTest_DeleteInexistentThrowsNotFound_TestD0Ev:
        1:  103:TEST_F(PayrollDatabaseTest, DeleteInexistentThrowsNotFound)
        1:  103-block  0
------------------
_ZN55PayrollDatabaseTest_DeleteInexistentThrowsNotFound_TestD1Ev:
        1:  103:TEST_F(PayrollDatabaseTest, DeleteInexistentThrowsNotFound)
        1:  103-block  0
------------------
_ZN55PayrollDatabaseTest_DeleteInexistentThrowsNotFound_Test8TestBodyEv:
        1:  103:TEST_F(PayrollDatabaseTest, DeleteInexistentThrowsNotFound)
        -:  104:{
       1*:  105:    ASSERT_THROW(database->deleteEmployee(inexistentId), PayrollDatabase::not_found);
        1:  105-block  0
        1:  105-block  1
        1:  105-block  2
        1:  105-block  3
        1:  105-block  4
    %%%%%:  105-block  5
    %%%%%:  105-block  6
    %%%%%:  105-block  7
    %%%%%:  105-block  8
    %%%%%:  105-block  9
        1:  105-block 10
        1:  105-block 11
    $$$$$:  105-block 12
    $$$$$:  105-block 13
    $$$$$:  105-block 14
    $$$$$:  105-block 15
    $$$$$:  105-block 16
       1*:  106:    ASSERT_EQ(database->size(), initSize);
        1:  106-block  0
        1:  106-block  1
    %%%%%:  106-block  2
    %%%%%:  106-block  3
    %%%%%:  106-block  4
    %%%%%:  106-block  5
    $$$$$:  106-block  6
    $$$$$:  106-block  7
    $$$$$:  106-block  8
    $$$$$:  106-block  9
    $$$$$:  106-block 10
    $$$$$:  106-block 11
        -:  107:}
------------------
_ZN55PayrollDatabaseTest_DeleteInexistentThrowsNotFound_TestC1Ev:
        1:  103:TEST_F(PayrollDatabaseTest, DeleteInexistentThrowsNotFound)
        1:  103-block  0
------------------
        -:  108:
        4:  109:TEST_F(PayrollDatabaseTest, Clear)
        -:  110:{
       1*:  111:    ASSERT_NO_THROW(addNBobs(17));
        1:  112:    database->clear();
       1*:  113:    ASSERT_EQ(database->size(), 0);
        -:  114:}
