        -:    0:Source:C:/Users/mickl/ClionProjects/payroll-system/tests/AddAndRetrieveEmployeeTester.hpp
        -:    0:Graph:C:\Users\mickl\ClionProjects\payroll-system\cmake-build-debug\tests\CMakeFiles\google_test.dir\AddEmployeeTest.cpp.gcno
        -:    0:Data:C:\Users\mickl\ClionProjects\payroll-system\cmake-build-debug\tests\CMakeFiles\google_test.dir\AddEmployeeTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef PAYROLL_SYSTEM_ADDANDRETRIEVEEMPLOYEETESTER_HPP
        -:    2:#define PAYROLL_SYSTEM_ADDANDRETRIEVEEMPLOYEETESTER_HPP
        -:    3:
        -:    4:
        -:    5:#include <gtest/gtest.h>
        -:    6:#include "src/Transactions/AddEmployeeTransaction.hpp"
        -:    7:#include "src/PayrollDatabase.hpp"
        -:    8:
        -:    9:template<typename ClassificationT, typename ScheduleT>
        -:   10:class AddAndRetrieveEmployeeTester
        -:   11:{
        -:   12:public:
        -:   13:    AddAndRetrieveEmployeeTester(double hRate, double sSalary, double cSalary, double cRate);
        -:   14:    void invoke(AddEmployeeTransaction* transaction, int idToCheck, std::string nameToCheck);
        -:   15:
        -:   16:private:
        -:   17:    void testDatabaseContains(int id);
        -:   18:    void testEmployee(std::shared_ptr<Employee> givenE, std::string nameToCheck);
        -:   19:    void testName(std::shared_ptr<Employee> givenE, std::string nameToCheck) const;
        -:   20:    void testClassification(std::shared_ptr<Employee> givenE) const;
        -:   21:    template<typename ExpectedT, typename ActualT>
        -:   22:    void testIsCorrectDerivedType(ActualT ptrToBase) const;
        -:   23:
        -:   24:private:
        -:   25:    double hRate, sSalary, cSalary, cRate;
        -:   26:    std::shared_ptr<PayrollDatabase> database = PayrollDatabase::getInstance();
        -:   27:};
        -:   28:
        -:   29:template<typename ClassificationT, typename ScheduleT>
        3:   30:AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   31:    AddAndRetrieveEmployeeTester(double hRate, double sSalary, double cSalary, double cRate) :
        -:   32:        hRate(hRate),
        -:   33:        sSalary(sSalary),
        -:   34:        cSalary(cSalary),
        3:   35:        cRate(cRate)
        -:   36:{
        3:   37:}
------------------
_ZN28AddAndRetrieveEmployeeTesterIN8Employee26CommissionedClassificationENS0_16BiweeklyScheduleEEC1Edddd:
        1:   30:AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   31:    AddAndRetrieveEmployeeTester(double hRate, double sSalary, double cSalary, double cRate) :
        -:   32:        hRate(hRate),
        -:   33:        sSalary(sSalary),
        -:   34:        cSalary(cSalary),
        1:   35:        cRate(cRate)
        1:   35-block  0
        -:   36:{
        1:   37:}
------------------
_ZN28AddAndRetrieveEmployeeTesterIN8Employee22SalariedClassificationENS0_15MonthlyScheduleEEC1Edddd:
        1:   30:AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   31:    AddAndRetrieveEmployeeTester(double hRate, double sSalary, double cSalary, double cRate) :
        -:   32:        hRate(hRate),
        -:   33:        sSalary(sSalary),
        -:   34:        cSalary(cSalary),
        1:   35:        cRate(cRate)
        1:   35-block  0
        -:   36:{
        1:   37:}
------------------
_ZN28AddAndRetrieveEmployeeTesterIN8Employee20HourlyClassificationENS0_14WeeklyScheduleEEC1Edddd:
        1:   30:AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   31:    AddAndRetrieveEmployeeTester(double hRate, double sSalary, double cSalary, double cRate) :
        -:   32:        hRate(hRate),
        -:   33:        sSalary(sSalary),
        -:   34:        cSalary(cSalary),
        1:   35:        cRate(cRate)
        1:   35-block  0
        -:   36:{
        1:   37:}
------------------
        -:   38:
        -:   39:template<typename ClassificationT, typename ScheduleT>
        -:   40:void
        3:   41:AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   42:        invoke(AddEmployeeTransaction* transaction, int idToCheck, std::string nameToCheck)
        -:   43:{
        3:   44:    transaction->execute();
        -:   45:
        3:   46:    testDatabaseContains(idToCheck);
        3:   47:    testEmployee(database->getEmployee(idToCheck), nameToCheck);
        3:   48:}
------------------
_ZN28AddAndRetrieveEmployeeTesterIN8Employee26CommissionedClassificationENS0_16BiweeklyScheduleEE6invokeEP22AddEmployeeTransactioniNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
        1:   41:AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   42:        invoke(AddEmployeeTransaction* transaction, int idToCheck, std::string nameToCheck)
        -:   43:{
        1:   44:    transaction->execute();
        1:   44-block  0
        -:   45:
        1:   46:    testDatabaseContains(idToCheck);
        1:   47:    testEmployee(database->getEmployee(idToCheck), nameToCheck);
        1:   47-block  0
        1:   47-block  1
    $$$$$:   47-block  2
    $$$$$:   47-block  3
    $$$$$:   47-block  4
        1:   48:}
------------------
_ZN28AddAndRetrieveEmployeeTesterIN8Employee22SalariedClassificationENS0_15MonthlyScheduleEE6invokeEP22AddEmployeeTransactioniNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
        1:   41:AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   42:        invoke(AddEmployeeTransaction* transaction, int idToCheck, std::string nameToCheck)
        -:   43:{
        1:   44:    transaction->execute();
        1:   44-block  0
        -:   45:
        1:   46:    testDatabaseContains(idToCheck);
        1:   47:    testEmployee(database->getEmployee(idToCheck), nameToCheck);
        1:   47-block  0
        1:   47-block  1
    $$$$$:   47-block  2
    $$$$$:   47-block  3
    $$$$$:   47-block  4
        1:   48:}
------------------
_ZN28AddAndRetrieveEmployeeTesterIN8Employee20HourlyClassificationENS0_14WeeklyScheduleEE6invokeEP22AddEmployeeTransactioniNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
        1:   41:AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   42:        invoke(AddEmployeeTransaction* transaction, int idToCheck, std::string nameToCheck)
        -:   43:{
        1:   44:    transaction->execute();
        1:   44-block  0
        -:   45:
        1:   46:    testDatabaseContains(idToCheck);
        1:   47:    testEmployee(database->getEmployee(idToCheck), nameToCheck);
        1:   47-block  0
        1:   47-block  1
    $$$$$:   47-block  2
    $$$$$:   47-block  3
    $$$$$:   47-block  4
        1:   48:}
------------------
        -:   49:
        -:   50:template<typename ClassificationT, typename ScheduleT>
        3:   51:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   52:        testDatabaseContains(int id)
        -:   53:{
       3*:   54:    ASSERT_NO_THROW(database->getEmployee(id));
        -:   55:}
------------------
_ZN28AddAndRetrieveEmployeeTesterIN8Employee26CommissionedClassificationENS0_16BiweeklyScheduleEE20testDatabaseContainsEi:
        1:   51:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   52:        testDatabaseContains(int id)
        -:   53:{
       1*:   54:    ASSERT_NO_THROW(database->getEmployee(id));
        1:   54-block  0
        1:   54-block  1
        1:   54-block  2
        1:   54-block  3
        1:   54-block  4
    %%%%%:   54-block  5
    %%%%%:   54-block  6
    %%%%%:   54-block  7
    %%%%%:   54-block  8
    %%%%%:   54-block  9
    $$$$$:   54-block 10
    $$$$$:   54-block 11
    $$$$$:   54-block 12
    $$$$$:   54-block 13
    $$$$$:   54-block 14
    $$$$$:   54-block 15
    $$$$$:   54-block 16
    $$$$$:   54-block 17
    $$$$$:   54-block 18
    $$$$$:   54-block 19
    $$$$$:   54-block 20
    $$$$$:   54-block 21
    $$$$$:   54-block 22
    $$$$$:   54-block 23
    $$$$$:   54-block 24
    $$$$$:   54-block 25
        -:   55:}
------------------
_ZN28AddAndRetrieveEmployeeTesterIN8Employee22SalariedClassificationENS0_15MonthlyScheduleEE20testDatabaseContainsEi:
        1:   51:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   52:        testDatabaseContains(int id)
        -:   53:{
       1*:   54:    ASSERT_NO_THROW(database->getEmployee(id));
        1:   54-block  0
        1:   54-block  1
        1:   54-block  2
        1:   54-block  3
        1:   54-block  4
    %%%%%:   54-block  5
    %%%%%:   54-block  6
    %%%%%:   54-block  7
    %%%%%:   54-block  8
    %%%%%:   54-block  9
    $$$$$:   54-block 10
    $$$$$:   54-block 11
    $$$$$:   54-block 12
    $$$$$:   54-block 13
    $$$$$:   54-block 14
    $$$$$:   54-block 15
    $$$$$:   54-block 16
    $$$$$:   54-block 17
    $$$$$:   54-block 18
    $$$$$:   54-block 19
    $$$$$:   54-block 20
    $$$$$:   54-block 21
    $$$$$:   54-block 22
    $$$$$:   54-block 23
    $$$$$:   54-block 24
    $$$$$:   54-block 25
        -:   55:}
------------------
_ZN28AddAndRetrieveEmployeeTesterIN8Employee20HourlyClassificationENS0_14WeeklyScheduleEE20testDatabaseContainsEi:
        1:   51:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   52:        testDatabaseContains(int id)
        -:   53:{
       1*:   54:    ASSERT_NO_THROW(database->getEmployee(id));
        1:   54-block  0
        1:   54-block  1
        1:   54-block  2
        1:   54-block  3
        1:   54-block  4
    %%%%%:   54-block  5
    %%%%%:   54-block  6
    %%%%%:   54-block  7
    %%%%%:   54-block  8
    %%%%%:   54-block  9
    $$$$$:   54-block 10
    $$$$$:   54-block 11
    $$$$$:   54-block 12
    $$$$$:   54-block 13
    $$$$$:   54-block 14
    $$$$$:   54-block 15
    $$$$$:   54-block 16
    $$$$$:   54-block 17
    $$$$$:   54-block 18
    $$$$$:   54-block 19
    $$$$$:   54-block 20
    $$$$$:   54-block 21
    $$$$$:   54-block 22
    $$$$$:   54-block 23
    $$$$$:   54-block 24
    $$$$$:   54-block 25
        -:   55:}
------------------
        -:   56:
        -:   57:template<typename ClassificationT, typename ScheduleT>
        3:   58:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   59:        testEmployee(std::shared_ptr<Employee> givenE, std::string nameToCheck)
        -:   60:{
        3:   61:    testName(givenE, nameToCheck);
        3:   62:    testClassification(givenE);
        3:   63:    testIsCorrectDerivedType<ScheduleT>(givenE->getPaymentSchedule());
        3:   64:    testIsCorrectDerivedType<Employee::HoldMethod>(givenE->getPaymentMethod());
        3:   65:}
------------------
_ZN28AddAndRetrieveEmployeeTesterIN8Employee26CommissionedClassificationENS0_16BiweeklyScheduleEE12testEmployeeESt10shared_ptrIS0_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
        1:   58:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   59:        testEmployee(std::shared_ptr<Employee> givenE, std::string nameToCheck)
        -:   60:{
        1:   61:    testName(givenE, nameToCheck);
        1:   61-block  0
        1:   61-block  1
    $$$$$:   61-block  2
    $$$$$:   61-block  3
    $$$$$:   61-block  4
    $$$$$:   61-block  5
        1:   62:    testClassification(givenE);
        1:   62-block  0
    $$$$$:   62-block  1
    $$$$$:   62-block  2
        1:   63:    testIsCorrectDerivedType<ScheduleT>(givenE->getPaymentSchedule());
        1:   63-block  0
    $$$$$:   63-block  1
    $$$$$:   63-block  2
        1:   64:    testIsCorrectDerivedType<Employee::HoldMethod>(givenE->getPaymentMethod());
        1:   64-block  0
    $$$$$:   64-block  1
        1:   65:}
------------------
_ZN28AddAndRetrieveEmployeeTesterIN8Employee22SalariedClassificationENS0_15MonthlyScheduleEE12testEmployeeESt10shared_ptrIS0_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
        1:   58:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   59:        testEmployee(std::shared_ptr<Employee> givenE, std::string nameToCheck)
        -:   60:{
        1:   61:    testName(givenE, nameToCheck);
        1:   61-block  0
        1:   61-block  1
    $$$$$:   61-block  2
    $$$$$:   61-block  3
    $$$$$:   61-block  4
    $$$$$:   61-block  5
        1:   62:    testClassification(givenE);
        1:   62-block  0
    $$$$$:   62-block  1
    $$$$$:   62-block  2
        1:   63:    testIsCorrectDerivedType<ScheduleT>(givenE->getPaymentSchedule());
        1:   63-block  0
    $$$$$:   63-block  1
    $$$$$:   63-block  2
        1:   64:    testIsCorrectDerivedType<Employee::HoldMethod>(givenE->getPaymentMethod());
        1:   64-block  0
    $$$$$:   64-block  1
        1:   65:}
------------------
_ZN28AddAndRetrieveEmployeeTesterIN8Employee20HourlyClassificationENS0_14WeeklyScheduleEE12testEmployeeESt10shared_ptrIS0_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
        1:   58:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   59:        testEmployee(std::shared_ptr<Employee> givenE, std::string nameToCheck)
        -:   60:{
        1:   61:    testName(givenE, nameToCheck);
        1:   61-block  0
        1:   61-block  1
    $$$$$:   61-block  2
    $$$$$:   61-block  3
    $$$$$:   61-block  4
    $$$$$:   61-block  5
        1:   62:    testClassification(givenE);
        1:   62-block  0
    $$$$$:   62-block  1
    $$$$$:   62-block  2
        1:   63:    testIsCorrectDerivedType<ScheduleT>(givenE->getPaymentSchedule());
        1:   63-block  0
    $$$$$:   63-block  1
    $$$$$:   63-block  2
        1:   64:    testIsCorrectDerivedType<Employee::HoldMethod>(givenE->getPaymentMethod());
        1:   64-block  0
    $$$$$:   64-block  1
        1:   65:}
------------------
        -:   66:
        -:   67:template<typename ClassificationT, typename ScheduleT>
        3:   68:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   69:        testName(std::shared_ptr<Employee> givenE, std::string nameToCheck) const
        -:   70:{
       6*:   71:    ASSERT_EQ(givenE->getName(), nameToCheck);
        -:   72:}
------------------
_ZNK28AddAndRetrieveEmployeeTesterIN8Employee26CommissionedClassificationENS0_16BiweeklyScheduleEE8testNameESt10shared_ptrIS0_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
        1:   68:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   69:        testName(std::shared_ptr<Employee> givenE, std::string nameToCheck) const
        -:   70:{
       2*:   71:    ASSERT_EQ(givenE->getName(), nameToCheck);
        1:   71-block  0
        1:   71-block  1
    %%%%%:   71-block  2
    %%%%%:   71-block  3
    %%%%%:   71-block  4
    %%%%%:   71-block  5
    $$$$$:   71-block  6
    $$$$$:   71-block  7
    $$$$$:   71-block  8
    $$$$$:   71-block  9
    $$$$$:   71-block 10
    $$$$$:   71-block 11
        -:   72:}
------------------
_ZNK28AddAndRetrieveEmployeeTesterIN8Employee22SalariedClassificationENS0_15MonthlyScheduleEE8testNameESt10shared_ptrIS0_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
        1:   68:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   69:        testName(std::shared_ptr<Employee> givenE, std::string nameToCheck) const
        -:   70:{
       2*:   71:    ASSERT_EQ(givenE->getName(), nameToCheck);
        1:   71-block  0
        1:   71-block  1
    %%%%%:   71-block  2
    %%%%%:   71-block  3
    %%%%%:   71-block  4
    %%%%%:   71-block  5
    $$$$$:   71-block  6
    $$$$$:   71-block  7
    $$$$$:   71-block  8
    $$$$$:   71-block  9
    $$$$$:   71-block 10
    $$$$$:   71-block 11
        -:   72:}
------------------
_ZNK28AddAndRetrieveEmployeeTesterIN8Employee20HourlyClassificationENS0_14WeeklyScheduleEE8testNameESt10shared_ptrIS0_ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
        1:   68:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   69:        testName(std::shared_ptr<Employee> givenE, std::string nameToCheck) const
        -:   70:{
       2*:   71:    ASSERT_EQ(givenE->getName(), nameToCheck);
        1:   71-block  0
        1:   71-block  1
    %%%%%:   71-block  2
    %%%%%:   71-block  3
    %%%%%:   71-block  4
    %%%%%:   71-block  5
    $$$$$:   71-block  6
    $$$$$:   71-block  7
    $$$$$:   71-block  8
    $$$$$:   71-block  9
    $$$$$:   71-block 10
    $$$$$:   71-block 11
        -:   72:}
------------------
        -:   73:template<typename ClassificationT, typename ScheduleT>
        3:   74:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   75:        testClassification(std::shared_ptr<Employee> givenE) const
        -:   76:{
        3:   77:    auto pc = givenE->getPaymentClassification();
        3:   78:    testIsCorrectDerivedType<ClassificationT>(pc);
        -:   79:
        3:   80:    auto classification = std::dynamic_pointer_cast<ClassificationT>(pc);
        -:   81:    if      constexpr (std::is_same_v<ClassificationT, Employee::HourlyClassification>)
       1*:   82:        ASSERT_DOUBLE_EQ(classification->getHourlyRate(), hRate);
        -:   83:    else if constexpr (std::is_same_v<ClassificationT, Employee::SalariedClassification>)
       1*:   84:        ASSERT_DOUBLE_EQ(classification->getSalary(), sSalary);
        -:   85:    else if constexpr (std::is_same_v<ClassificationT, Employee::CommissionedClassification>)
        -:   86:    {
       1*:   87:        ASSERT_DOUBLE_EQ(classification->getSalary(), cSalary);
       1*:   88:        ASSERT_DOUBLE_EQ(classification->getCommissionRate(), cRate);
        -:   89:    }
        -:   90:    else
        -:   91:        FAIL()<<"Unknown Payment Classification subclass";
        -:   92:}
------------------
_ZNK28AddAndRetrieveEmployeeTesterIN8Employee26CommissionedClassificationENS0_16BiweeklyScheduleEE18testClassificationESt10shared_ptrIS0_E:
        1:   74:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   75:        testClassification(std::shared_ptr<Employee> givenE) const
        -:   76:{
        1:   77:    auto pc = givenE->getPaymentClassification();
        1:   77-block  0
    $$$$$:   77-block  1
        1:   78:    testIsCorrectDerivedType<ClassificationT>(pc);
        1:   78-block  0
    $$$$$:   78-block  1
    $$$$$:   78-block  2
        -:   79:
        1:   80:    auto classification = std::dynamic_pointer_cast<ClassificationT>(pc);
    $$$$$:   80-block  0
        -:   81:    if      constexpr (std::is_same_v<ClassificationT, Employee::HourlyClassification>)
        -:   82:        ASSERT_DOUBLE_EQ(classification->getHourlyRate(), hRate);
        -:   83:    else if constexpr (std::is_same_v<ClassificationT, Employee::SalariedClassification>)
        -:   84:        ASSERT_DOUBLE_EQ(classification->getSalary(), sSalary);
        -:   85:    else if constexpr (std::is_same_v<ClassificationT, Employee::CommissionedClassification>)
        -:   86:    {
       1*:   87:        ASSERT_DOUBLE_EQ(classification->getSalary(), cSalary);
        1:   87-block  0
    %%%%%:   87-block  1
    %%%%%:   87-block  2
    %%%%%:   87-block  3
    %%%%%:   87-block  4
    $$$$$:   87-block  5
    $$$$$:   87-block  6
    $$$$$:   87-block  7
    $$$$$:   87-block  8
    $$$$$:   87-block  9
       1*:   88:        ASSERT_DOUBLE_EQ(classification->getCommissionRate(), cRate);
        1:   88-block  0
        1:   88-block  1
    %%%%%:   88-block  2
    %%%%%:   88-block  3
    %%%%%:   88-block  4
    %%%%%:   88-block  5
    $$$$$:   88-block  6
    $$$$$:   88-block  7
    $$$$$:   88-block  8
    $$$$$:   88-block  9
    $$$$$:   88-block 10
        -:   89:    }
        -:   90:    else
        -:   91:        FAIL()<<"Unknown Payment Classification subclass";
        -:   92:}
------------------
_ZNK28AddAndRetrieveEmployeeTesterIN8Employee22SalariedClassificationENS0_15MonthlyScheduleEE18testClassificationESt10shared_ptrIS0_E:
        1:   74:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   75:        testClassification(std::shared_ptr<Employee> givenE) const
        -:   76:{
        1:   77:    auto pc = givenE->getPaymentClassification();
        1:   77-block  0
    $$$$$:   77-block  1
        1:   78:    testIsCorrectDerivedType<ClassificationT>(pc);
        1:   78-block  0
    $$$$$:   78-block  1
    $$$$$:   78-block  2
        -:   79:
        1:   80:    auto classification = std::dynamic_pointer_cast<ClassificationT>(pc);
    $$$$$:   80-block  0
        -:   81:    if      constexpr (std::is_same_v<ClassificationT, Employee::HourlyClassification>)
        -:   82:        ASSERT_DOUBLE_EQ(classification->getHourlyRate(), hRate);
        -:   83:    else if constexpr (std::is_same_v<ClassificationT, Employee::SalariedClassification>)
       1*:   84:        ASSERT_DOUBLE_EQ(classification->getSalary(), sSalary);
        1:   84-block  0
    %%%%%:   84-block  1
    %%%%%:   84-block  2
    %%%%%:   84-block  3
    %%%%%:   84-block  4
    $$$$$:   84-block  5
    $$$$$:   84-block  6
    $$$$$:   84-block  7
    $$$$$:   84-block  8
    $$$$$:   84-block  9
        -:   85:    else if constexpr (std::is_same_v<ClassificationT, Employee::CommissionedClassification>)
        -:   86:    {
        -:   87:        ASSERT_DOUBLE_EQ(classification->getSalary(), cSalary);
        -:   88:        ASSERT_DOUBLE_EQ(classification->getCommissionRate(), cRate);
        -:   89:    }
        -:   90:    else
        -:   91:        FAIL()<<"Unknown Payment Classification subclass";
        -:   92:}
------------------
_ZNK28AddAndRetrieveEmployeeTesterIN8Employee20HourlyClassificationENS0_14WeeklyScheduleEE18testClassificationESt10shared_ptrIS0_E:
        1:   74:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   75:        testClassification(std::shared_ptr<Employee> givenE) const
        -:   76:{
        1:   77:    auto pc = givenE->getPaymentClassification();
        1:   77-block  0
    $$$$$:   77-block  1
        1:   78:    testIsCorrectDerivedType<ClassificationT>(pc);
        1:   78-block  0
    $$$$$:   78-block  1
    $$$$$:   78-block  2
        -:   79:
        1:   80:    auto classification = std::dynamic_pointer_cast<ClassificationT>(pc);
    $$$$$:   80-block  0
        -:   81:    if      constexpr (std::is_same_v<ClassificationT, Employee::HourlyClassification>)
       1*:   82:        ASSERT_DOUBLE_EQ(classification->getHourlyRate(), hRate);
        1:   82-block  0
    %%%%%:   82-block  1
    %%%%%:   82-block  2
    %%%%%:   82-block  3
    %%%%%:   82-block  4
    $$$$$:   82-block  5
    $$$$$:   82-block  6
    $$$$$:   82-block  7
    $$$$$:   82-block  8
    $$$$$:   82-block  9
        -:   83:    else if constexpr (std::is_same_v<ClassificationT, Employee::SalariedClassification>)
        -:   84:        ASSERT_DOUBLE_EQ(classification->getSalary(), sSalary);
        -:   85:    else if constexpr (std::is_same_v<ClassificationT, Employee::CommissionedClassification>)
        -:   86:    {
        -:   87:        ASSERT_DOUBLE_EQ(classification->getSalary(), cSalary);
        -:   88:        ASSERT_DOUBLE_EQ(classification->getCommissionRate(), cRate);
        -:   89:    }
        -:   90:    else
        -:   91:        FAIL()<<"Unknown Payment Classification subclass";
        -:   92:}
------------------
        -:   93:
        -:   94:template<typename ClassificationT, typename ScheduleT>
        -:   95:template<typename ExpectedT, typename ActualT>
        9:   96:void AddAndRetrieveEmployeeTester<ClassificationT, ScheduleT>::
        -:   97:        testIsCorrectDerivedType(ActualT ptrToBase) const
        -:   98:{
        9:   99:    auto ptrToDerived = std::dynamic_pointer_cast<ExpectedT>(ptrToBase);
      18*:  100:    ASSERT_NE(ptrToDerived, decltype(ptrToDerived)());
        -:  101:}
        -:  102:
        -:  103:
        -:  104:
        -:  105:#endif //PAYROLL_SYSTEM_ADDANDRETRIEVEEMPLOYEETESTER_HPP
