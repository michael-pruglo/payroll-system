        -:    0:Source:C:/Users/mickl/ClionProjects/payroll-system/tests/Transactions/utility/EmployeeCorrectnessTester.cpp
        -:    0:Graph:C:\Users\mickl\ClionProjects\payroll-system\cmake-build-debug\tests\CMakeFiles\google_test.dir\Transactions\utility\EmployeeCorrectnessTester.cpp.gcno
        -:    0:Data:C:\Users\mickl\ClionProjects\payroll-system\cmake-build-debug\tests\CMakeFiles\google_test.dir\Transactions\utility\EmployeeCorrectnessTester.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <algorithm>
        -:    2:#include "EmployeeCorrectnessTester.hpp"
        -:    3:#include "src/Employee/PaymentClassification.cpp"
        -:    4:
        -:    5:
       18:    6:void EmployeeCorrectnessTester::addServiceCharge(ServiceCharge serviceCharge)
        -:    7:{
       18:    8:    serviceCharges.push_back(serviceCharge);
       18:    8-block  0
       18:    9:}
        -:   10:
       15:   11:void EmployeeCorrectnessTester::testName(std::string givenName, std::string nameToCheck) const
        -:   12:{
      15*:   13:    ASSERT_EQ(givenName, nameToCheck);
       15:   13-block  0
       15:   13-block  1
    %%%%%:   13-block  2
    %%%%%:   13-block  3
    %%%%%:   13-block  4
    %%%%%:   13-block  5
    $$$$$:   13-block  6
    $$$$$:   13-block  7
    $$$$$:   13-block  8
    $$$$$:   13-block  9
    $$$$$:   13-block 10
        -:   14:}
       15:   15:void EmployeeCorrectnessTester::testAddress(std::string givenAddress, std::string addressToCheck) const
        -:   16:{
      15*:   17:    ASSERT_EQ(givenAddress, addressToCheck);
       15:   17-block  0
       15:   17-block  1
    %%%%%:   17-block  2
    %%%%%:   17-block  3
    %%%%%:   17-block  4
    %%%%%:   17-block  5
    $$$$$:   17-block  6
    $$$$$:   17-block  7
    $$$$$:   17-block  8
    $$$$$:   17-block  9
    $$$$$:   17-block 10
        -:   18:}
        -:   19:
       15:   20:void EmployeeCorrectnessTester::testServiceChargeList(std::vector<ServiceCharge> givenServiceCharges)
        -:   21:{
       15:   22:    std::sort(givenServiceCharges.begin(), givenServiceCharges.end());
       15:   22-block  0
       15:   23:    std::sort(this->serviceCharges.begin(), this->serviceCharges.end());
      15*:   24:    ASSERT_TRUE(std::equal(givenServiceCharges.begin(), givenServiceCharges.end(), this->serviceCharges.begin()));
       15:   24-block  0
    %%%%%:   24-block  1
    %%%%%:   24-block  2
    %%%%%:   24-block  3
    %%%%%:   24-block  4
    %%%%%:   24-block  5
    $$$$$:   24-block  6
    $$$$$:   24-block  7
    $$$$$:   24-block  8
    $$$$$:   24-block  9
    $$$$$:   24-block 10
    $$$$$:   24-block 11
    $$$$$:   24-block 12
        -:   25:}
        -:   26:
       10:   27:void HourlyEmployeeCorrectnessTester::testScheduleType()
        -:   28:{
       10:   29:    testIsCorrectDerivedType<WeeklySchedule>(givenE.getPaymentSchedule());
       10:   29-block  0
       10:   29-block  1
    $$$$$:   29-block  2
       10:   30:}
        -:   31:
       10:   32:void HourlyEmployeeCorrectnessTester::testClassification(std::shared_ptr<PaymentClassification> pc) const
        -:   33:{
       10:   34:    testIsCorrectDerivedType<HourlyClassification>(pc);
       10:   34-block  0
       10:   34-block  1
    $$$$$:   34-block  2
    $$$$$:   34-block  3
       10:   35:    auto classification = std::dynamic_pointer_cast<HourlyClassification>(pc);
    $$$$$:   35-block  0
      10*:   36:    ASSERT_DOUBLE_EQ(classification->getHourlyRate(), hRate);
       10:   36-block  0
    %%%%%:   36-block  1
    %%%%%:   36-block  2
    %%%%%:   36-block  3
    %%%%%:   36-block  4
    $$$$$:   36-block  5
    $$$$$:   36-block  6
    $$$$$:   36-block  7
    $$$$$:   36-block  8
    $$$$$:   36-block  9
       10:   37:    if (timeCard)
       10:   37-block  0
        -:   38:    {
        1:   39:        auto tc = classification->getTimeCard(timeCard->getDate());
        1:   39-block  0
       1*:   40:        ASSERT_EQ(tc.getHours(), timeCard->getHours());
        1:   40-block  0
        1:   40-block  1
    %%%%%:   40-block  2
    %%%%%:   40-block  3
    %%%%%:   40-block  4
    %%%%%:   40-block  5
    $$$$$:   40-block  6
    $$$$$:   40-block  7
    $$$$$:   40-block  8
    $$$$$:   40-block  9
    $$$$$:   40-block 10
    $$$$$:   40-block 11
    $$$$$:   40-block 12
        -:   41:    }
        -:   42:}
        -:   43:
        2:   44:void SalariedEmployeeCorrectnessTester::testScheduleType()
        -:   45:{
        2:   46:    testIsCorrectDerivedType<MonthlySchedule>(givenE.getPaymentSchedule());
        2:   46-block  0
        2:   46-block  1
    $$$$$:   46-block  2
        2:   47:}
        -:   48:
        2:   49:void SalariedEmployeeCorrectnessTester::testClassification(std::shared_ptr<PaymentClassification> pc) const
        -:   50:{
        2:   51:    testIsCorrectDerivedType<SalariedClassification>(pc);
        2:   51-block  0
        2:   51-block  1
    $$$$$:   51-block  2
    $$$$$:   51-block  3
        2:   52:    auto classification = std::dynamic_pointer_cast<SalariedClassification>(pc);
    $$$$$:   52-block  0
       2*:   53:    ASSERT_DOUBLE_EQ(classification->getSalary(), sSalary);
        2:   53-block  0
    %%%%%:   53-block  1
    %%%%%:   53-block  2
    %%%%%:   53-block  3
    %%%%%:   53-block  4
    $$$$$:   53-block  5
    $$$$$:   53-block  6
    $$$$$:   53-block  7
    $$$$$:   53-block  8
    $$$$$:   53-block  9
        -:   54:}
        -:   55:
        3:   56:void CommissionedEmployeeCorrectnessTester::testScheduleType()
        -:   57:{
        3:   58:    testIsCorrectDerivedType<BiweeklySchedule>(givenE.getPaymentSchedule());
        3:   58-block  0
        3:   58-block  1
    $$$$$:   58-block  2
        3:   59:}
        -:   60:
        3:   61:void CommissionedEmployeeCorrectnessTester::testClassification(std::shared_ptr<PaymentClassification> pc) const
        -:   62:{
        3:   63:    testIsCorrectDerivedType<CommissionedClassification>(pc);
        3:   63-block  0
        3:   63-block  1
    $$$$$:   63-block  2
    $$$$$:   63-block  3
        3:   64:    auto classification = std::dynamic_pointer_cast<CommissionedClassification>(pc);
    $$$$$:   64-block  0
       3*:   65:    ASSERT_DOUBLE_EQ(classification->getSalary(), cSalary);
        3:   65-block  0
    %%%%%:   65-block  1
    %%%%%:   65-block  2
    %%%%%:   65-block  3
    %%%%%:   65-block  4
    $$$$$:   65-block  5
    $$$$$:   65-block  6
    $$$$$:   65-block  7
    $$$$$:   65-block  8
    $$$$$:   65-block  9
       3*:   66:    ASSERT_DOUBLE_EQ(classification->getCommissionRate(), cRate);
        3:   66-block  0
        3:   66-block  1
    %%%%%:   66-block  2
    %%%%%:   66-block  3
    %%%%%:   66-block  4
    %%%%%:   66-block  5
    $$$$$:   66-block  6
    $$$$$:   66-block  7
    $$$$$:   66-block  8
    $$$$$:   66-block  9
    $$$$$:   66-block 10
        3:   67:    if (salesReceipt)
        3:   67-block  0
        -:   68:    {
        1:   69:        auto sr = classification->getSalesReceipt(salesReceipt->getDate());
        1:   69-block  0
       1*:   70:        ASSERT_EQ(sr.getAmount(), salesReceipt->getAmount());
        1:   70-block  0
        1:   70-block  1
    %%%%%:   70-block  2
    %%%%%:   70-block  3
    %%%%%:   70-block  4
    %%%%%:   70-block  5
    $$$$$:   70-block  6
    $$$$$:   70-block  7
    $$$$$:   70-block  8
    $$$$$:   70-block  9
    $$$$$:   70-block 10
    $$$$$:   70-block 11
    $$$$$:   70-block 12
        -:   71:    }
        -:   72:}
