        -:    0:Source:C:/Users/mickl/ClionProjects/payroll-system/tests/Transactions/utility/EmployeeCorrectnessTester.cpp
        -:    0:Graph:C:\Users\mickl\ClionProjects\payroll-system\cmake-build-debug\tests\CMakeFiles\google_test.dir\Transactions\utility\EmployeeCorrectnessTester.cpp.gcno
        -:    0:Data:C:\Users\mickl\ClionProjects\payroll-system\cmake-build-debug\tests\CMakeFiles\google_test.dir\Transactions\utility\EmployeeCorrectnessTester.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "EmployeeCorrectnessTester.hpp"
        -:    2:
        -:    3:
        5:    4:void EmployeeCorrectnessTester::invoke(int idToCheck, std::string nameToCheck)
        -:    5:{
        5:    6:    testDatabaseContains(idToCheck);
        5:    6-block  0
        5:    7:    testEmployee(database->getEmployee(idToCheck), nameToCheck);
        5:    7-block  0
        5:    7-block  1
    $$$$$:    7-block  2
    $$$$$:    7-block  3
    $$$$$:    7-block  4
        5:    8:}
        -:    9:
        5:   10:void EmployeeCorrectnessTester::testDatabaseContains(int id)
        -:   11:{
       5*:   12:    ASSERT_NO_THROW(database->getEmployee(id));
        5:   12-block  0
        5:   12-block  1
        5:   12-block  2
        5:   12-block  3
        5:   12-block  4
    %%%%%:   12-block  5
    %%%%%:   12-block  6
    %%%%%:   12-block  7
    %%%%%:   12-block  8
    %%%%%:   12-block  9
    $$$$$:   12-block 10
    $$$$$:   12-block 11
    $$$$$:   12-block 12
    $$$$$:   12-block 13
    $$$$$:   12-block 14
    $$$$$:   12-block 15
    $$$$$:   12-block 16
    $$$$$:   12-block 17
    $$$$$:   12-block 18
    $$$$$:   12-block 19
    $$$$$:   12-block 20
    $$$$$:   12-block 21
    $$$$$:   12-block 22
    $$$$$:   12-block 23
    $$$$$:   12-block 24
    $$$$$:   12-block 25
        -:   13:}
        -:   14:
        5:   15:void EmployeeCorrectnessTester::testName(std::shared_ptr<Employee> givenE, std::string nameToCheck) const
        -:   16:{
      10*:   17:    ASSERT_EQ(givenE->getName(), nameToCheck);
        5:   17-block  0
        5:   17-block  1
    %%%%%:   17-block  2
    %%%%%:   17-block  3
    %%%%%:   17-block  4
    %%%%%:   17-block  5
    $$$$$:   17-block  6
    $$$$$:   17-block  7
    $$$$$:   17-block  8
    $$$$$:   17-block  9
    $$$$$:   17-block 10
    $$$$$:   17-block 11
        -:   18:}
        -:   19:
        -:   20:template<typename ExpectedT, typename ActualT>
       15:   21:void EmployeeCorrectnessTester::testIsCorrectDerivedType(ActualT ptrToBase) const
        -:   22:{
       15:   23:    auto ptrToDerived = std::dynamic_pointer_cast<ExpectedT>(ptrToBase);
      30*:   24:    ASSERT_NE(ptrToDerived, decltype(ptrToDerived)());
        -:   25:}
------------------
_ZNK25EmployeeCorrectnessTester24testIsCorrectDerivedTypeI26CommissionedClassificationSt10shared_ptrI21PaymentClassificationEEEvT0_:
        2:   21:void EmployeeCorrectnessTester::testIsCorrectDerivedType(ActualT ptrToBase) const
        -:   22:{
        2:   23:    auto ptrToDerived = std::dynamic_pointer_cast<ExpectedT>(ptrToBase);
        2:   23-block  0
    $$$$$:   23-block  1
       4*:   24:    ASSERT_NE(ptrToDerived, decltype(ptrToDerived)());
    %%%%%:   24-block  0
    %%%%%:   24-block  1
    %%%%%:   24-block  2
    %%%%%:   24-block  3
    $$$$$:   24-block  4
    $$$$$:   24-block  5
    $$$$$:   24-block  6
    $$$$$:   24-block  7
    $$$$$:   24-block  8
    $$$$$:   24-block  9
        -:   25:}
------------------
_ZNK25EmployeeCorrectnessTester24testIsCorrectDerivedTypeI16BiweeklyScheduleSt10shared_ptrI15PaymentScheduleEEEvT0_:
        2:   21:void EmployeeCorrectnessTester::testIsCorrectDerivedType(ActualT ptrToBase) const
        -:   22:{
        2:   23:    auto ptrToDerived = std::dynamic_pointer_cast<ExpectedT>(ptrToBase);
        2:   23-block  0
    $$$$$:   23-block  1
       4*:   24:    ASSERT_NE(ptrToDerived, decltype(ptrToDerived)());
    %%%%%:   24-block  0
    %%%%%:   24-block  1
    %%%%%:   24-block  2
    %%%%%:   24-block  3
    $$$$$:   24-block  4
    $$$$$:   24-block  5
    $$$$$:   24-block  6
    $$$$$:   24-block  7
    $$$$$:   24-block  8
    $$$$$:   24-block  9
        -:   25:}
------------------
_ZNK25EmployeeCorrectnessTester24testIsCorrectDerivedTypeI22SalariedClassificationSt10shared_ptrI21PaymentClassificationEEEvT0_:
        1:   21:void EmployeeCorrectnessTester::testIsCorrectDerivedType(ActualT ptrToBase) const
        -:   22:{
        1:   23:    auto ptrToDerived = std::dynamic_pointer_cast<ExpectedT>(ptrToBase);
        1:   23-block  0
    $$$$$:   23-block  1
       2*:   24:    ASSERT_NE(ptrToDerived, decltype(ptrToDerived)());
    %%%%%:   24-block  0
    %%%%%:   24-block  1
    %%%%%:   24-block  2
    %%%%%:   24-block  3
    $$$$$:   24-block  4
    $$$$$:   24-block  5
    $$$$$:   24-block  6
    $$$$$:   24-block  7
    $$$$$:   24-block  8
    $$$$$:   24-block  9
        -:   25:}
------------------
_ZNK25EmployeeCorrectnessTester24testIsCorrectDerivedTypeI15MonthlyScheduleSt10shared_ptrI15PaymentScheduleEEEvT0_:
        1:   21:void EmployeeCorrectnessTester::testIsCorrectDerivedType(ActualT ptrToBase) const
        -:   22:{
        1:   23:    auto ptrToDerived = std::dynamic_pointer_cast<ExpectedT>(ptrToBase);
        1:   23-block  0
    $$$$$:   23-block  1
       2*:   24:    ASSERT_NE(ptrToDerived, decltype(ptrToDerived)());
    %%%%%:   24-block  0
    %%%%%:   24-block  1
    %%%%%:   24-block  2
    %%%%%:   24-block  3
    $$$$$:   24-block  4
    $$$$$:   24-block  5
    $$$$$:   24-block  6
    $$$$$:   24-block  7
    $$$$$:   24-block  8
    $$$$$:   24-block  9
        -:   25:}
------------------
_ZNK25EmployeeCorrectnessTester24testIsCorrectDerivedTypeI20HourlyClassificationSt10shared_ptrI21PaymentClassificationEEEvT0_:
        2:   21:void EmployeeCorrectnessTester::testIsCorrectDerivedType(ActualT ptrToBase) const
        -:   22:{
        2:   23:    auto ptrToDerived = std::dynamic_pointer_cast<ExpectedT>(ptrToBase);
        2:   23-block  0
    $$$$$:   23-block  1
       4*:   24:    ASSERT_NE(ptrToDerived, decltype(ptrToDerived)());
    %%%%%:   24-block  0
    %%%%%:   24-block  1
    %%%%%:   24-block  2
    %%%%%:   24-block  3
    $$$$$:   24-block  4
    $$$$$:   24-block  5
    $$$$$:   24-block  6
    $$$$$:   24-block  7
    $$$$$:   24-block  8
    $$$$$:   24-block  9
        -:   25:}
------------------
_ZNK25EmployeeCorrectnessTester24testIsCorrectDerivedTypeI10HoldMethodSt10shared_ptrI13PaymentMethodEEEvT0_:
        5:   21:void EmployeeCorrectnessTester::testIsCorrectDerivedType(ActualT ptrToBase) const
        -:   22:{
        5:   23:    auto ptrToDerived = std::dynamic_pointer_cast<ExpectedT>(ptrToBase);
        5:   23-block  0
    $$$$$:   23-block  1
      10*:   24:    ASSERT_NE(ptrToDerived, decltype(ptrToDerived)());
    %%%%%:   24-block  0
    %%%%%:   24-block  1
    %%%%%:   24-block  2
    %%%%%:   24-block  3
    $$$$$:   24-block  4
    $$$$$:   24-block  5
    $$$$$:   24-block  6
    $$$$$:   24-block  7
    $$$$$:   24-block  8
    $$$$$:   24-block  9
        -:   25:}
------------------
_ZNK25EmployeeCorrectnessTester24testIsCorrectDerivedTypeI14WeeklyScheduleSt10shared_ptrI15PaymentScheduleEEEvT0_:
        2:   21:void EmployeeCorrectnessTester::testIsCorrectDerivedType(ActualT ptrToBase) const
        -:   22:{
        2:   23:    auto ptrToDerived = std::dynamic_pointer_cast<ExpectedT>(ptrToBase);
        2:   23-block  0
    $$$$$:   23-block  1
       4*:   24:    ASSERT_NE(ptrToDerived, decltype(ptrToDerived)());
    %%%%%:   24-block  0
    %%%%%:   24-block  1
    %%%%%:   24-block  2
    %%%%%:   24-block  3
    $$$$$:   24-block  4
    $$$$$:   24-block  5
    $$$$$:   24-block  6
    $$$$$:   24-block  7
    $$$$$:   24-block  8
    $$$$$:   24-block  9
        -:   25:}
------------------
        -:   26:
        2:   27:void HourlyEmployeeCorrectnessTester::testEmployee(std::shared_ptr<Employee> givenE, std::string nameToCheck)
        -:   28:{
        2:   29:    testName(givenE, nameToCheck);
        2:   29-block  0
        2:   29-block  1
    $$$$$:   29-block  2
    $$$$$:   29-block  3
    $$$$$:   29-block  4
    $$$$$:   29-block  5
        2:   30:    testClassification(givenE->getPaymentClassification());
        2:   30-block  0
    $$$$$:   30-block  1
    $$$$$:   30-block  2
        2:   31:    testIsCorrectDerivedType<WeeklySchedule>(givenE->getPaymentSchedule());
        2:   31-block  0
    $$$$$:   31-block  1
    $$$$$:   31-block  2
        2:   32:    testIsCorrectDerivedType<HoldMethod>(givenE->getPaymentMethod());
        2:   32-block  0
    $$$$$:   32-block  1
        2:   33:}
        -:   34:
        2:   35:void HourlyEmployeeCorrectnessTester::testClassification(std::shared_ptr<PaymentClassification> pc) const
        -:   36:{
        2:   37:    testIsCorrectDerivedType<HourlyClassification>(pc);
        2:   37-block  0
        2:   37-block  1
    $$$$$:   37-block  2
    $$$$$:   37-block  3
        2:   38:    auto classification = std::dynamic_pointer_cast<HourlyClassification>(pc);
    $$$$$:   38-block  0
       2*:   39:    ASSERT_DOUBLE_EQ(classification->getHourlyRate(), hRate);
        2:   39-block  0
    %%%%%:   39-block  1
    %%%%%:   39-block  2
    %%%%%:   39-block  3
    %%%%%:   39-block  4
    $$$$$:   39-block  5
    $$$$$:   39-block  6
    $$$$$:   39-block  7
    $$$$$:   39-block  8
    $$$$$:   39-block  9
        2:   40:    if (timeCard)
        2:   40-block  0
        -:   41:    {
        1:   42:        auto tc = classification->getTimeCard(timeCard->getDate());
        1:   42-block  0
       1*:   43:        ASSERT_EQ(tc.getHours(), timeCard->getHours());
        1:   43-block  0
        1:   43-block  1
    %%%%%:   43-block  2
    %%%%%:   43-block  3
    %%%%%:   43-block  4
    %%%%%:   43-block  5
    $$$$$:   43-block  6
    $$$$$:   43-block  7
    $$$$$:   43-block  8
    $$$$$:   43-block  9
    $$$$$:   43-block 10
    $$$$$:   43-block 11
    $$$$$:   43-block 12
        -:   44:    }
        -:   45:}
        -:   46:
        1:   47:void SalariedEmployeeCorrectnessTester::testEmployee(std::shared_ptr<Employee> givenE, std::string nameToCheck)
        -:   48:{
        1:   49:    testName(givenE, nameToCheck);
        1:   49-block  0
        1:   49-block  1
    $$$$$:   49-block  2
    $$$$$:   49-block  3
    $$$$$:   49-block  4
    $$$$$:   49-block  5
        1:   50:    testClassification(givenE->getPaymentClassification());
        1:   50-block  0
    $$$$$:   50-block  1
    $$$$$:   50-block  2
        1:   51:    testIsCorrectDerivedType<MonthlySchedule>(givenE->getPaymentSchedule());
        1:   51-block  0
    $$$$$:   51-block  1
    $$$$$:   51-block  2
        1:   52:    testIsCorrectDerivedType<HoldMethod>(givenE->getPaymentMethod());
        1:   52-block  0
    $$$$$:   52-block  1
        1:   53:}
        -:   54:
        1:   55:void SalariedEmployeeCorrectnessTester::testClassification(std::shared_ptr<PaymentClassification> pc) const
        -:   56:{
        1:   57:    testIsCorrectDerivedType<SalariedClassification>(pc);
        1:   57-block  0
        1:   57-block  1
    $$$$$:   57-block  2
    $$$$$:   57-block  3
        1:   58:    auto classification = std::dynamic_pointer_cast<SalariedClassification>(pc);
    $$$$$:   58-block  0
       1*:   59:    ASSERT_DOUBLE_EQ(classification->getSalary(), sSalary);
        1:   59-block  0
    %%%%%:   59-block  1
    %%%%%:   59-block  2
    %%%%%:   59-block  3
    %%%%%:   59-block  4
    $$$$$:   59-block  5
    $$$$$:   59-block  6
    $$$$$:   59-block  7
    $$$$$:   59-block  8
    $$$$$:   59-block  9
        -:   60:}
        -:   61:
        2:   62:void CommissionedEmployeeCorrectnessTester::testEmployee(std::shared_ptr<Employee> givenE, std::string nameToCheck)
        -:   63:{
        2:   64:    testName(givenE, nameToCheck);
        2:   64-block  0
        2:   64-block  1
    $$$$$:   64-block  2
    $$$$$:   64-block  3
    $$$$$:   64-block  4
    $$$$$:   64-block  5
        2:   65:    testClassification(givenE->getPaymentClassification());
        2:   65-block  0
    $$$$$:   65-block  1
    $$$$$:   65-block  2
        2:   66:    testIsCorrectDerivedType<BiweeklySchedule>(givenE->getPaymentSchedule());
        2:   66-block  0
    $$$$$:   66-block  1
    $$$$$:   66-block  2
        2:   67:    testIsCorrectDerivedType<HoldMethod>(givenE->getPaymentMethod());
        2:   67-block  0
    $$$$$:   67-block  1
        2:   68:}
        -:   69:
        2:   70:void CommissionedEmployeeCorrectnessTester::testClassification(std::shared_ptr<PaymentClassification> pc) const
        -:   71:{
        2:   72:    testIsCorrectDerivedType<CommissionedClassification>(pc);
        2:   72-block  0
        2:   72-block  1
    $$$$$:   72-block  2
    $$$$$:   72-block  3
        2:   73:    auto classification = std::dynamic_pointer_cast<CommissionedClassification>(pc);
    $$$$$:   73-block  0
       2*:   74:    ASSERT_DOUBLE_EQ(classification->getSalary(), cSalary);
        2:   74-block  0
    %%%%%:   74-block  1
    %%%%%:   74-block  2
    %%%%%:   74-block  3
    %%%%%:   74-block  4
    $$$$$:   74-block  5
    $$$$$:   74-block  6
    $$$$$:   74-block  7
    $$$$$:   74-block  8
    $$$$$:   74-block  9
       2*:   75:    ASSERT_DOUBLE_EQ(classification->getCommissionRate(), cRate);
        2:   75-block  0
        2:   75-block  1
    %%%%%:   75-block  2
    %%%%%:   75-block  3
    %%%%%:   75-block  4
    %%%%%:   75-block  5
    $$$$$:   75-block  6
    $$$$$:   75-block  7
    $$$$$:   75-block  8
    $$$$$:   75-block  9
    $$$$$:   75-block 10
        -:   76:}
