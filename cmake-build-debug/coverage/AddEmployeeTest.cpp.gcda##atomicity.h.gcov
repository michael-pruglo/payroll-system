        -:    0:Source:C:/msys64/mingw64/include/c++/10.1.0/ext/atomicity.h
        -:    0:Graph:C:\Users\mickl\ClionProjects\payroll-system\cmake-build-debug\tests\CMakeFiles\google_test.dir\AddEmployeeTest.cpp.gcno
        -:    0:Data:C:\Users\mickl\ClionProjects\payroll-system\cmake-build-debug\tests\CMakeFiles\google_test.dir\AddEmployeeTest.cpp.gcda
        -:    0:Runs:1
        -:    1:// Support for atomic operations -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2004-2020 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/atomicity.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _GLIBCXX_ATOMICITY_H
        -:   30:#define _GLIBCXX_ATOMICITY_H	1
        -:   31:
        -:   32:#pragma GCC system_header
        -:   33:
        -:   34:#include <bits/c++config.h>
        -:   35:#include <bits/gthr.h>
        -:   36:#include <bits/atomic_word.h>
        -:   37:
        -:   38:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   39:{
        -:   40:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   41:
        -:   42:  // Functions for portable atomic access.
        -:   43:  // To abstract locking primitives across all thread policies, use:
        -:   44:  // __exchange_and_add_dispatch
        -:   45:  // __atomic_add_dispatch
        -:   46:#ifdef _GLIBCXX_ATOMIC_BUILTINS
        -:   47:  inline _Atomic_word
        -:   48:  __attribute__((__always_inline__))
        -:   49:  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
    #####:   50:  { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    %%%%%:   50-block  0
    %%%%%:   50-block  1
        -:   51:
        -:   52:  inline void
        -:   53:  __attribute__((__always_inline__))
        -:   54:  __atomic_add(volatile _Atomic_word* __mem, int __val)
    #####:   55:  { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
    %%%%%:   55-block  0
        -:   56:#else
        -:   57:  _Atomic_word
        -:   58:  __exchange_and_add(volatile _Atomic_word*, int) _GLIBCXX_NOTHROW;
        -:   59:
        -:   60:  void
        -:   61:  __atomic_add(volatile _Atomic_word*, int) _GLIBCXX_NOTHROW;
        -:   62:#endif
        -:   63:
        -:   64:  inline _Atomic_word
        -:   65:  __attribute__((__always_inline__))
        -:   66:  __exchange_and_add_single(_Atomic_word* __mem, int __val)
        -:   67:  {
    #####:   68:    _Atomic_word __result = *__mem;
    #####:   69:    *__mem += __val;
    #####:   70:    return __result;
    %%%%%:   70-block  0
    %%%%%:   70-block  1
        -:   71:  }
        -:   72:
        -:   73:  inline void
        -:   74:  __attribute__((__always_inline__))
        -:   75:  __atomic_add_single(_Atomic_word* __mem, int __val)
    #####:   76:  { *__mem += __val; }
    %%%%%:   76-block  0
        -:   77:
        -:   78:  inline _Atomic_word
        -:   79:  __attribute__ ((__always_inline__))
        -:   80:  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
        -:   81:  {
        -:   82:#ifdef __GTHREADS
    #####:   83:    if (__gthread_active_p())
    %%%%%:   83-block  0
    #####:   84:      return __exchange_and_add(__mem, __val);
    %%%%%:   84-block  0
    %%%%%:   84-block  1
        -:   85:#endif
    #####:   86:    return __exchange_and_add_single(__mem, __val);
    %%%%%:   86-block  0
    %%%%%:   86-block  1
        -:   87:  }
        -:   88:
        -:   89:  inline void
        -:   90:  __attribute__ ((__always_inline__))
        -:   91:  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
        -:   92:  {
        -:   93:#ifdef __GTHREADS
    #####:   94:    if (__gthread_active_p())
    %%%%%:   94-block  0
        -:   95:      {
        -:   96:	__atomic_add(__mem, __val);
    #####:   97:	return;
    %%%%%:   97-block  0
        -:   98:      }
        -:   99:#endif
        -:  100:    __atomic_add_single(__mem, __val);
        -:  101:  }
        -:  102:
        -:  103:_GLIBCXX_END_NAMESPACE_VERSION
        -:  104:} // namespace
        -:  105:
        -:  106:// Even if the CPU doesn't need a memory barrier, we need to ensure
        -:  107:// that the compiler doesn't reorder memory accesses across the
        -:  108:// barriers.
        -:  109:#ifndef _GLIBCXX_READ_MEM_BARRIER
        -:  110:#define _GLIBCXX_READ_MEM_BARRIER __atomic_thread_fence (__ATOMIC_ACQUIRE)
        -:  111:#endif
        -:  112:#ifndef _GLIBCXX_WRITE_MEM_BARRIER
        -:  113:#define _GLIBCXX_WRITE_MEM_BARRIER __atomic_thread_fence (__ATOMIC_RELEASE)
        -:  114:#endif
        -:  115:
        -:  116:#endif 
