        -:    0:Source:C:/Users/mickl/ClionProjects/payroll-system/src/Database/PayrollDatabase.cpp
        -:    0:Graph:C:\Users\mickl\ClionProjects\payroll-system\cmake-build-debug\tests\CMakeFiles\google_test.dir\Database\DatabaseTest.cpp.gcno
        -:    0:Data:C:\Users\mickl\ClionProjects\payroll-system\cmake-build-debug\tests\CMakeFiles\google_test.dir\Database\DatabaseTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "PayrollDatabase.hpp"
        -:    2:
        -:    3:#define EXECUTE_OPTION( CONTAINER, ELEM_TO_FIND, IF_CONTAINS, IF_DOESNT_CONTAIN ) \
        -:    4:    auto it = CONTAINER.find(ELEM_TO_FIND); \
        -:    5:    if (it == CONTAINER.end()) \
        -:    6:        IF_DOESNT_CONTAIN; \
        -:    7:    else \
        -:    8:        IF_CONTAINS;
        -:    9:
        -:   10:#define IF_CONTAINS_EXECUTE_ELSE_THROW_NOT_FOUND( FOO ) EXECUTE_OPTION( database, id, FOO, throw not_found(id) )
        -:   11:
       79:   12:void PayrollDatabase::addEmployee(int id, std::shared_ptr<Employee> employee)
        -:   13:{
       79:   14:    if(database.contains(id))
       79:   14-block  0
       10:   15:        throw add_duplicate(id);
       10:   15-block  0
       10:   15-block  1
    $$$$$:   15-block  2
        -:   16:    else
       69:   17:        database.insert({id, employee});
       69:   17-block  0
       69:   17-block  1
    $$$$$:   17-block  2
       69:   18:}
        -:   19:
       70:   20:std::shared_ptr<Employee> PayrollDatabase::getEmployee(int id) const
        -:   21:{
      138:   22:    IF_CONTAINS_EXECUTE_ELSE_THROW_NOT_FOUND(return it->second);
       70:   22-block  0
       70:   22-block  1
        2:   22-block  2
        2:   22-block  3
       68:   22-block  4
       68:   22-block  5
    $$$$$:   22-block  6
        -:   23:}
        -:   24:
        2:   25:void PayrollDatabase::updateEmployee(int id, std::shared_ptr<Employee> newEmployee)
        -:   26:{
        2:   27:    IF_CONTAINS_EXECUTE_ELSE_THROW_NOT_FOUND(it->second = newEmployee);
        2:   27-block  0
        2:   27-block  1
        1:   27-block  2
        1:   27-block  3
        1:   27-block  4
    $$$$$:   27-block  5
        1:   28:}
        -:   29:
        8:   30:void PayrollDatabase::deleteEmployee(int id)
        -:   31:{
        8:   32:    IF_CONTAINS_EXECUTE_ELSE_THROW_NOT_FOUND(database.erase(it));
        8:   32-block  0
        8:   32-block  1
        4:   32-block  2
        4:   32-block  3
        4:   32-block  4
    $$$$$:   32-block  5
        4:   33:}
        4:   33-block  0
        -:   34:
        -:   35:#undef EXECUTE_OPTION
        -:   36:#undef IF_CONTAINS_EXECUTE_ELSE_THROW_NOT_FOUND
        -:   37:
        -:   38:
        -:   39:std::shared_ptr<PayrollDatabase> PayrollDatabase::_instance = nullptr;
        -:   40:
       85:   41:std::shared_ptr<PayrollDatabase> PayrollDatabase::getInstance()
        -:   42:{
       85:   43:    if (_instance == nullptr)
       85:   43-block  0
        1:   44:        _instance = std::shared_ptr<PayrollDatabase> {new PayrollDatabase()};
        1:   44-block  0
       85:   45:    return _instance;
       85:   45-block  0
        -:   46:}
